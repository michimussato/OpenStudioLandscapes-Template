# pyproject.toml
# - https://packaging.python.org/en/latest/specifications/pyproject-toml/
# - https://xebia.com/blog/an-updated-guide-to-setuptools-and-pyproject-toml/
# - https://devsjc.github.io/blog/20240627-the-complete-guide-to-pyproject-toml/

[build-system]
requires = [
    "setuptools>=80",
    "setuptools-scm>=9",
]
build-backend = "setuptools.build_meta"

[project]
name = "OpenStudioLandscapes-Template"
description = "Template Feature for OpenStudioLandscapes"
authors = [{name = "Michael Mussato", email = "michimussato@gmail.com"}]
maintainers = [{name = "Michael Mussato", email = "michimussato@gmail.com"}]
license-files = ["LICENSE.txt"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Framework :: OpenStudioLandscapes",
]
requires-python = ">=3.11"
dependencies = [
    'importlib-metadata; python_version<"3.8"',
    "dagster==1.9.11",
    "gitpython",
    "PyYAML",
    # yaml_tags.overrides:
    "docker-compose-graph @ git+https://github.com/michimussato/docker-compose-graph.git@v1.0.0",
    "OpenStudioLandscapes @ git+https://github.com/michimussato/OpenStudioLandscapes@v1.4.0",
]
dynamic = ["version"]

[project.readme]
file = "README.md"
content-type = "text/markdown; charset=UTF-8"
# Change if running only on Windows, Mac or Linux (comma-separated)
# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/

[project.urls]
Homepage = "https://github.com/michimussato/OpenStudioLandscapes-Template"

[project.optional-dependencies]
# Add here additional requirements for extra features, to install with:
# `pip install OpenStudioLandscapes-Template[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
testing = [
    "setuptools",
    "pytest",
    "pytest-cov",
]
graphviz = [
    "graphviz",
    "pipdeptree",
]
sbom = [
    "OpenStudioLandscapes-Template[graphviz]",
    "cyclonedx-bom",
]
lint = [
    "black",
    "isort",
    "pre-commit",
    "pylint",
]
coverage = [
    "coverage",
    "pytest",
]
nox = [
    "OpenStudioLandscapes-Template[testing]",
    "nox",
]
readme = [
    "OpenStudioLandscapesUtil-ReadmeGenerator @ git+https://github.com/michimussato/OpenStudioLandscapesUtil-ReadmeGenerator.git@v1.4.0"
]
dev = [
    "OpenStudioLandscapes-Template[testing]",
    "OpenStudioLandscapes-Template[lint]",
    "OpenStudioLandscapes-Template[nox]",
    "OpenStudioLandscapes-Template[sbom]",
    "OpenStudioLandscapes-Template[coverage]",
    "OpenStudioLandscapes-Template[readme]",
    "dagster-webserver==1.9.11",
]

[project.entry-points]
# Add here console scripts like:
# console_scripts =
# script_name = OpenStudioLandscapes.Template.module:function
# For example:
# console_scripts =
# fibonacci = OpenStudioLandscapes.Template.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
# awesome = pyscaffoldext.awesome.extension:AwesomeExtension

# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#setuptools-specific-configuration
[tool.setuptools]
include-package-data = true
package-dir = {"" = "src"}
# Require a min/specific Python version (comma-separated conditions)
# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
platforms = ["Linux"]
# Use `packages` for explicit
# packabe definition because
# `readme_generator` will look
# for this section.
# ONLY ONE IS ALLOWED HERE!
# In theory, we could also define a custom
# metadata section like for example:
#
# [tool.openstudiolandscapes.ayon]
# namespace = "OpenStudioLandscapes"
# package = "Ayon"
# constants = "constants.py"
# ...
#
# and so on. For now, there is no obvious
# additional value in doing so as
# long as the structure of all Features
# stay consistent
packages = [
    "OpenStudioLandscapes.Template"
]

# [tool.pytest.ini_options]
# # Specify command line options as you would do when invoking pytest directly.
# # e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# # in order to write a coverage file that can be read by Jenkins.
# # CAUTION: --cov flags may prohibit setting breakpoints while debugging.
# # Comment those flags to avoid this pytest issue.
# addopts = """
# --cov OpenStudioLandscapes.Template --cov-report term-missing
# --verbose"""
# norecursedirs = [
#     "dist",
#     "build",
#     ".nox",
# ]
# testpaths = ["tests"]
# # Use pytest markers to select/deselect specific tests
# # markers =
# # slow: mark tests as slow (deselect with '-m "not slow"')
# # system: mark end-to-end system tests

# [tool.setuptools_scm]
# version_file = "src/OpenStudioLandscapes/Template/_version.py"

[tool.dagster]
module_name = "OpenStudioLandscapes.Template.definitions"
code_location_name = "OpenStudioLandscapes-Template"
